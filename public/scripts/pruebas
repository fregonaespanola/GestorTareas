

async function obtenerTareas() {
    try {
      const response = await fetch('/obtener-tareas');
      const result = await response.json();
  
      if (result.success) {
        const tareas = result.tareas;
  
        const contenedor = document.getElementById('tareasContenedor');
        contenedor.innerHTML = '';
        const tabla = document.createElement('table');
        tabla.style.border = '1px solid black';
        tabla.style.width = '100%';
  
        const encabezado = document.createElement('tr');
        encabezado.innerHTML = '<th>TO DO</th><th>DOING</th><th>DONE</th>';
        tabla.appendChild(encabezado);
  
        const todoColumn = document.createElement('td');
        const doingColumn = document.createElement('td');
        const doneColumn = document.createElement('td');
        todoColumn.classList.add('tareaColumn');
        doingColumn.classList.add('tareaColumn');
        doneColumn.classList.add('tareaColumn');
  
        tareas.forEach(tarea => {
          const nombreEditable = document.createElement('div');
          nombreEditable.contentEditable = true;
          nombreEditable.dataset.id = tarea.id;
          nombreEditable.classList.add('tarea'); // Agrega la clase 'tarea'
  
          nombreEditable.innerHTML = `<p>${tarea.nombre}(ID: ${tarea.id})</p>
          <div class="singtar" data-estado="${tarea.estado}">
          <table class="movement">
            <tr>
              <td><button class="todobutton" onclick="cambiarEstado(${tarea.id}, 'TO DO')">TO DO</button></td>
              <td><button class="doingbutton" onclick="cambiarEstado(${tarea.id}, 'DOING')">DOING</button></td>
              <td><button class="donebutton" onclick="cambiarEstado(${tarea.id}, 'DONE')">DONE</button></td>
            </tr>
            <tr>
              <td colspan="3"><button class="guardarbutton" onclick="guardarCambios(${tarea.id})">Guardar</button></td>
            </tr>
          </table>
          <button class="elim-sing" onclick="eliminarTarea(${tarea.id})">Eliminar</button>
        </div>`;
  
          // Agrega el evento blur para actualizar la tarea cuando se pierde el foco
          nombreEditable.addEventListener('blur', async () => {
            const nuevoNombre = nombreEditable.textContent.trim();
            const contenidoHTML = nombreEditable.innerHTML;
            await actualizarTarea(tarea.id, nuevoNombre, contenidoHTML);
            obtenerTareas();
          });
  
          // Agrega la tarea a la columna correspondiente según su estado
          switch (tarea.estado) {
            case 'TO DO':
              todoColumn.appendChild(nombreEditable);
              break;
            case 'DOING':
              doingColumn.appendChild(nombreEditable);
              break;
            case 'DONE':
              doneColumn.appendChild(nombreEditable);
              break;
            default:
              break;
          }
        });
  
        // Crea una fila para cada columna y agrega las celdas
        const fila = document.createElement('tr');
        fila.appendChild(todoColumn);
        fila.appendChild(doingColumn);
        fila.appendChild(doneColumn);
  
        // Agrega la fila a la tabla
        tabla.appendChild(fila);
  
        // Agrega la tabla al contenedor
        contenedor.appendChild(tabla);
      }
    } catch (error) {
      console.error('Error al obtener tareas:', error);
    }
  }
  
  
  
  async function actualizarTarea(id, nuevoNombre) {
    try {
      const response = await fetch(`/actualizar-tarea/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ nuevoNombre }),
      });
      
      console.log(id);
      const result = await response.json(); //Aqui falla
      if (!result.success) {
        console.error('Error al actualizar tarea:', result.error);
      }
    } catch (error) {
      console.error('Error al actualizar tarea:', error);
    }
  }
  
  async function guardarCambios(id) {
    try {
      const tareaEditable = document.querySelector(`[contenteditable][data-id="${id}"]`);
      const nuevoNombre = tareaEditable.textContent.trim();
      const contenidoHTML = tareaEditable.innerHTML;
      const response = await fetch(`/actualizar-tarea/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ nuevoNombre, contenidoHTML }),
      });
  
      const result = await response.json();
  
      if (result.success) {
        obtenerTareas(); // Aquí se actualiza la tabla después de guardar cambios
      } else {
        console.error('Error al guardar cambios:', result.error);
      }
    } catch (error) {
      console.error('Error al guardar cambios:', error);
    }
  }
  
  async function eliminarTarea(id) {
    try {
      const response = await fetch(`/eliminar-tarea/${id}`, { method: 'POST' });
      const result = await response.json();
  
      if (result.success) {
        obtenerTareas();
      } else {
        console.error('Error al eliminar tarea:', result.error);
      }
    } catch (error) {
      console.error('Error al eliminar tarea:', error);
    }
  }
  
  async function cambiarEstado(id, nuevoEstado) {
    try {
      const response = await fetch(`/actualizar-estado/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ nuevoEstado }),
      });
  
      const result = await response.json();
  
      if (result.success) {
        obtenerTareas();
      } else {
        console.error('Error al cambiar estado de la tarea:', result.error);
      }
    } catch (error) {
      console.error('Error al cambiar estado de la tarea:', error);
    }
  }
  
  
  
  
  async function eliminarTodasLasTareas() {
    try {
      const response = await fetch('/eliminar-todas', { method: 'POST' });
      const result = await response.json();
  
      if (result.success) {
        obtenerTareas();
      } else {
        console.error('Error al eliminar todas las tareas:', result.error);
      }
    } catch (error) {
      console.error('Error al eliminar todas las tareas:', error);
    }
  }
  
  
  
  obtenerTareas();

  const express = require('express');
const path = require('path');
const fs = require('fs').promises;
const app = express();
const PORT = 3000;
const TAREAS_FILE = 'tareas.json';

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Ruta para obtener las tareas existentes
app.get('/obtener-tareas', async (req, res) => {
  try {
    const tareas = await leerArchivo();
    res.json(tareas);
  } catch (err) {
    console.error('Error al obtener tareas:', err);
    res.status(500).send('Error al obtener tareas');
  }
});

// Ruta para eliminar una tarea por ID
app.post('/eliminar-tarea/:id', async (req, res) => {
  const taskId = parseInt(req.params.id, 10);

  try {
    // Lee el archivo
    const tareas = await leerArchivo();

    // Filtra las tareas para excluir la tarea con el ID especificado
    const nuevasTareas = tareas.filter(tarea => tarea.id !== taskId);

    // Escribe en el archivo las tareas actualizadas
    await escribirArchivo(nuevasTareas);

    res.json({ success: true });
  } catch (err) {
    console.error('Error al eliminar tarea:', err);
    res.status(500).json({ success: false, error: 'Error al eliminar tarea' });
  }
});

app.post('/', async (req, res) => {
  const tarea = { id: Date.now(), nombre: req.body.tarea, estado: 'TO DO' };

  try {
    // Lee el archivo
    const tareas = await leerArchivo();

    // Agrega la nueva tarea
    tareas.push(tarea);

    // Escribe en el archivo
    await escribirArchivo(tareas);

    // Envía las tareas actualizadas como respuesta
    res.json({ success: true, tareas });
  } catch (err) {
    console.error('Error al procesar la solicitud:', err);
    res.status(500).json({ success: false, error: 'Error al procesar la solicitud' });
  }
});



async function leerArchivo() {
  try {
    const data = await fs.readFile(TAREAS_FILE, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    if (err.code === 'ENOENT') {
      return [];
    }
    throw err;
  }
}

// Ruta para actualizar una tarea por ID
// Ruta para actualizar una tarea por ID
app.post('/actualizar-tarea/:id', async (req, res) => {
  const taskId = parseInt(req.params.id, 10);
  const nuevoNombre = req.body.nuevoNombre;
  const contenidoHTML = req.body.contenidoHTML;

  try {
    // Lee el archivo de tareas
    const data = await fs.readFile(TAREAS_FILE, 'utf-8');
    const tareas = JSON.parse(data);

    // Encuentra la tarea con el ID especificado
    const tarea = tareas.find(t => t.id === taskId);

    if (!tarea) {
      res.status(404).json({ success: false, error: 'Tarea no encontrada' });
      return;
    }

    let agarrarNombre = nuevoNombre.split("TO DO");  
    if(agarrarNombre[0].includes(`(ID`)){
      let aux = agarrarNombre[0].split("(ID");
      agarrarNombre[0] = aux[0];
      console.log(agarrarNombre[0].length);
      
    }
    tarea.nombre = agarrarNombre[0].trim();
    await fs.writeFile(TAREAS_FILE, JSON.stringify(tareas, null, 2), 'utf-8');

    // Devuelve las tareas actualizadas en formato JSON válido
    res.json({ success: true, tareas });
  } catch (err) {
    console.error('Error al actualizar tarea:', err);
    // Devuelve una respuesta en formato JSON válido incluso en caso de error
    res.status(500).json({ success: false, error: 'Error interno del servidor' });
  }
});

app.post('/actualizar-estado/:id', async (req, res) => {
  const taskId = parseInt(req.params.id, 10);
  const nuevoEstado = req.body.nuevoEstado;

  try {
    // Lee el archivo de tareas
    const data = await fs.readFile(TAREAS_FILE, 'utf-8');
    const tareas = JSON.parse(data);

    // Encuentra la tarea con el ID especificado
    const tarea = tareas.find(t => t.id === taskId);

    if (!tarea) {
      res.status(404).json({ success: false, error: 'Tarea no encontrada' });
      return;
    }

    tarea.estado = nuevoEstado;
    await fs.writeFile(TAREAS_FILE, JSON.stringify(tareas, null, 2), 'utf-8');
    res.json({ success: true, tareas });
  } catch (err) {
    console.error('Error al actualizar estado de la tarea:', err);
    res.status(500).json({ success: false, error: 'Error interno del servidor' });
  }
});
// Ruta para eliminar todas las tareas
app.post('/eliminar-todas', async (req, res) => {
  try {
    // Elimina todas las tareas del archivo
    await escribirArchivo([]);

    res.json({ success: true });
  } catch (err) {
    console.error('Error al eliminar todas las tareas:', err);
    res.status(500).json({ success: false, error: 'Error al eliminar todas las tareas' });
  }
});


async function escribirArchivo(tareas) {
  await fs.writeFile(TAREAS_FILE, JSON.stringify(tareas, null, 2), 'utf-8');
}


app.listen(PORT, () => {
  console.log(`Servidor en http://localhost:${PORT}`);
});

--------------------------------

async function obtenerTareas() {
    try {
      const response = await fetch('/obtener-tareas');
      const tareas = await response.json();
  
      const contenedor = document.getElementById('tareasContenedor');
      contenedor.innerHTML = '';
       const tabla = document.createElement('table');
       tabla.style.border = '1px solid black';
       tabla.style.width = '100%';
  
       const encabezado = document.createElement('tr');
       encabezado.innerHTML = '<th>TO DO</th><th>DOING</th><th>DONE</th>';
       tabla.appendChild(encabezado);
  
       tareas.forEach(tarea => {
          const filaToDo = document.createElement('tr');
          const celdaToDo = document.createElement('td');
          celdaToDo.classList.add('tarea');
          const nombreEditable = document.createElement('div');
          nombreEditable.contentEditable = true;
          nombreEditable.dataset.id = tarea.id; // Añade el atributo data-id
          nombreEditable.innerHTML = `<p>${tarea.nombre}(ID: ${tarea.id})</p>
                              <div class="singtar">
                                 <table class="movement">
                                    <tr>
                                    <button class="todobutton" onclick="actualizarEstado(${tarea.id}, 'TO DO')">TO DO</button>
                                    <button class="doingbutton" onclick="actualizarEstado(${tarea.id}, 'DOING')">DOING</button>
                                    <button class="donebutton" onclick="actualizarEstado(${tarea.id}, 'DONE')">DONE</button>                                  
                                    </tr>
                                    <tr>
                                      <td colspan="3"><button class="guardarbutton" onclick="guardarCambios(${tarea.id})">Guardar</button></td>
                                    </tr>
                                 </table>
                              <button class="elim-sing" onclick="eliminarTarea(${tarea.id})">Eliminar</button>
                              </div>`;
  
          celdaToDo.appendChild(nombreEditable);
          filaToDo.appendChild(celdaToDo);
          tabla.appendChild(filaToDo);
  
          // Agrega el evento blur para actualizar la tarea cuando se pierde el foco
          nombreEditable.addEventListener('blur', async () => {
            const nuevoNombre = nombreEditable.textContent.trim();
            const contenidoHTML = nombreEditable.innerHTML;
            await actualizarTarea(tarea.id, nuevoNombre, contenidoHTML);
            obtenerTareas();
          });
       });
  
       contenedor.appendChild(tabla);
    } catch (error) {
       console.error('Error al obtener tareas:', error);
    }
  }